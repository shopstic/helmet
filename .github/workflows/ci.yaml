name: CI Workflow

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build-env:
    name: Build CI environment image
    runs-on: ubuntu-20.04
    outputs:
      image: ${{ steps.buildkit.outputs.image }}
      imageRef: ${{ steps.buildkit.outputs.tag }}:${{ steps.buildkit.outputs.tag }}    
    steps:
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: chmod +r ~/.docker/config.json

      - name: Build and push shell Docker image
        id: buildkit
        uses: shopstic/buildkit-action@1.0.12
        with:
          context: ${{ github.workspace }}/images/shell
          image: docker.io/shopstic/helmet-shell
          tag: ${{ hashFiles('images/shell/*') }}
          skipIfExists: true

  build-app:
    name: Build app image
    needs: build-env
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Cache deno
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/.cache
          key: deno-${{ github.sha }}
          restore-keys: |
            deno-
    
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: chmod +r ~/.docker/config.json

      - name: Github ref name
        id: ref_name
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/heads/.* ]]; then
            echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
          fi

          if [[ "${GITHUB_REF}" =~ ^refs/tags/.* ]]; then
            echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
          fi

      - name: Build
        env:
          SHELL_IMAGE: ${{ needs.build-env.outputs.imageRef }}
          DENO_DIR: ${{ github.workspace }}/.cache/deno
          GITHUB_TAG: ${{ steps.ref_name.outputs.tag }}
        run: |-
          if ls "${DENO_DIR}" > /dev/null 2>&1; then
            du -sh "${DENO_DIR}"
          fi

          RELEASE_VERSION=${GITHUB_TAG:-GITHUB_SHA}

          cat <<EOF | docker run \
            --workdir /repo \
            -i \
            --rm \
            --init \
            -v "${GITHUB_WORKSPACE}:/repo" \
            -v "${DENO_DIR}:/root/.cache/deno" \
            -e "DENO_DIR=/root/.cache/deno" \
            "${SHELL_IMAGE}" \
            bash -l
          set -euo pipefail

          ./cli.sh update_cache
          ./cli.sh code_quality
          ./cli.sh build "${RELEASE_VERSION}"

          mkdir -p /usr/lib/helmet/
          cp ./images/release/helmet.js /usr/lib/helmet/

          # Test that the bundle works fine
          if [[ "\$(./images/release/helmet version)" != "${RELEASE_VERSION}" ]]; then
            echo "Bundle test failed"
            exit 1
          fi

          EOF

      - name: Build and push app Docker image to latest
        uses: shopstic/buildkit-action@1.0.12
        if: steps.ref_name.outputs.branch == 'main'
        with:
          context: ${{ github.workspace }}/images/release
          image: shopstic/bin-helmet
          tag: ${{ github.sha }}
          additionalTags: latest
          skipIfExists: false

      - name: Build and push app Docker image to tag
        uses: shopstic/buildkit-action@1.0.12
        if: steps.ref_name.outputs.tag != ''
        with:
          context: ${{ github.workspace }}/images/release
          image: shopstic/bin-helmet
          tag: ${{ steps.ref_name.outputs.tag }}
          skipIfExists: false

      - name: Build and push shell Docker image to tag
        if: steps.ref_name.outputs.tag != ''
        env:
          FROM_SHELL_IMAGE_REF: ${{ needs.build-env.outputs.imageRef }}
          TO_SHELL_IMAGE_REF: ${{ needs.build-env.outputs.image }}:${{ steps.ref_name.outputs.tag }}
        run: |
          docker tag "${FROM_SHELL_IMAGE_REF}" "${TO_SHELL_IMAGE_REF}"
          docker push "${TO_SHELL_IMAGE_REF}"